@model IEnumerable<WebShop.Models.Product>
@{
    // Safely convert ViewData values with null coalescing and explicit casting
    var currentPage = ViewData["CurrentPage"] != null ? Convert.ToInt32(ViewData["CurrentPage"]) : 1;
    var totalPages = ViewData["TotalPages"] != null ? Convert.ToInt32(ViewData["TotalPages"]) : 1;
    var hasPreviousPage = ViewData["HasPreviousPage"] != null ? Convert.ToBoolean(ViewData["HasPreviousPage"]) : false;
    var hasNextPage = ViewData["HasNextPage"] != null ? Convert.ToBoolean(ViewData["HasNextPage"]) : false;
}

<div class="card-header bg-secondary bg-gradient ml-0 py-3">
    <div class="row">
        <div class="col-12 text-center">
            <h2 class="text-white py-2">List Products</h2>
        </div>
    </div>
</div>
<div class="card-body">
    <div class="row pb-3">
        <div class="row pb-3">
            <div class="col-6">
                <form asp-controller="Product" asp-action="Index" method="get" class="d-flex">
                    <input type="text" name="keyword" class="form-control me-2 search-input" placeholder="Search products..." value="@ViewData["CurrentFilter"]" />
                    <button type="submit" class="btn btn-search">
                        <i class="bi bi-search">Find</i>
                    </button>
                </form>
            </div>
            <div class="col-6 text-end">
                <a asp-action="Create" asp-controller="Product" class="btn btn-create">
                    <i class="bi bi-plus-circle"></i> Create New Product
                </a>
            </div>
        </div>

    </div>
</div>
<table class="table">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Name</th>
            <th scope="col">Slug</th>
            <th scope="col">Description</th>
            <th scope="col">Price</th>
            <th scope="col">Status</th>
            <th style="width: 250px;">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Product item in Model)
        {
            <tr>
                <th scope="row">@item.Id</th>
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>@item.Price</td>
                <td>@item.Status</td>
                <td>
                    <div class="btn-group" role="group">
                        <a asp-controller="Product" asp-action="Edit" asp-route-id="@item.Id"
                           class="btn btn-primary btn-sm btn-lg">
                            <i class="bi bi-pencil-square"></i> Edit
                        </a>
                        <form asp-controller="Product" asp-action="Delete" asp-route-id="@item.Id"
                              method="post" class="d-inline">
                            <button type="submit" class="btn btn-danger btn-sm ms-1 btn-lg"
                                    onclick="return confirm('Are you sure you want to delete this category?');">
                                <i class="bi bi-trash-fill"></i> Delete
                            </button>
                        </form>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="d-flex justify-content-center">
    <ul class="pagination">
        <li class="page-item @(hasPreviousPage ? "" : "disabled")">
            <a class="page-link"
               asp-action="Index"
               asp-route-page="@(currentPage - 1)"
               aria-disabled="@(!hasPreviousPage)">
                Previous
            </a>
        </li>

        @for (int i = 1; i <= totalPages; i++)
        {
            <li class="page-item @(i == currentPage ? "active" : "")">
                <a class="page-link"
                   asp-action="Index"
                   asp-route-page="@i">
                    @i
                </a>
            </li>
        }

        <li class="page-item @(hasNextPage ? "" : "disabled")">
            <a class="page-link"
               asp-action="Index"
               asp-route-page="@(currentPage + 1)"
               aria-disabled="@(!hasNextPage)">
                Next
            </a>
        </li>
    </ul>
</div>
<style>
    /* Previous styles remain the same */
    .pagination .page-link {
        color: #192E2F;
    }

    .pagination .page-item.active .page-link {
        background-color: #192E2F;
        border-color: #192E2F;
        color:#fff
    }

    .search-input {
        border: 2px solid #192E2F;
        border-radius: 5px;
        height: 38px;
    }

    .btn-search {
        background-color: #192E2F;
        color: white;
        border: 2px solid #192E2F;
        border-radius: 5px;
        height: 38px;
        width: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .btn-search:hover {
            background-color: #2C4C50;
            color: white;
        }

    .btn-create {
        margin-top: 0;
        background-color: #eb8f34;
        border-color: #eb8f34;
        color: white;
        height: 38px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

        .btn-create:hover {
            background-color: #d97e2a;
            border-color: #d97e2a;
        }

        .btn-create i {
            margin-right: 5px;
        }
</style>